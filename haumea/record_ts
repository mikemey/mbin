#!/usr/bin/env bash

function error_message () {
  echo "ERROR: $1"
  echo -e "\n usage: $(basename -- $0) url_pattern max_piece_num"
  echo -e "\nParameters:"
  echo -e "\t url_pattern \t URL pattern to use for iteration"
  echo -e "\t max_piece_num \t upper limit of pieces (inclusive)"
  exit
}

function check_file () {
  if [ -f "$1" ]; then
    error_message "$2 already exists: $1"
  fi
}

function check_param () {
  if [ ! "$1" ]; then
    error_message "$2"
  fi
}

function check_exit_code () {
  if [ $? -ne 0 ]; then
     echo "ERROR"
     exit
  fi
}

output="output.mp4"
filelist="mylist.txt"
replace="XXX"
urlpattern="$1"
pieces="$2"

hcli_preset="son"

check_file "$filelist" "File list"
check_file "$output" "Output file"

check_param "$urlpattern" "URL pattern not provided!"
if [[ ${urlpattern} != *$replace* ]]; then
  error_message "URL pattern does not contain the replacement pattern \"$replace\""
fi

check_param "$pieces" "upper limit of pieces not provided!"
if ! [[ "$pieces" =~ ^[0-9]+$ ]]; then
  error_message "upper limit parameter not a number!"
fi


for count in $(seq 0 $pieces); do
  url="${urlpattern/$replace/$count}"
  tmpfile="$count.ts"
  outfile="$count.mp4"
  wget -q --show-progress -O "$tmpfile" "$url"
  check_exit_code

  HandBrakeCLI --preset-import-gui --preset="$hcli_preset" -i "$tmpfile" -o "$outfile" 2> /dev/null
  check_exit_code
  echo "file '$outfile'" >> $filelist
 done

echo
ffmpeg -v panic -stats -f concat -safe 0 -i "$filelist" -c copy "$output"

