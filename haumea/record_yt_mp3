#!/usr/bin/env bash

tmp_file="song.tmp"

function error_message () {
  echo
  echo "ERROR: $1"
  echo -e "\n usage: $(basename $0) csv_file"
  echo -e "\nParameters:"
  echo -e "\t csv_file \t CSV file containing audio tracks to record"
  exit 1
}

function file_not_found () {
  ! [[ -f "$1" ]] && echo 1
}

function check_exit_code () {
  [[ $? -ne 0 ]] && error_message "processing failed: $1"
}

if [[ $(file_not_found "$1") ]]; then
  error_message "No CSV file provided!"
fi

echo "finding missing files..."
missing_files=()
missing_files_ix=0
while IFS=\; read link artist title; do
    link=`trim_str "${link}"`
    artist=`trim_str "${artist}"`
    title=`trim_str "${title}"`
    fname="${artist} - ${title}"
    out_file="${fname}.mp3"

    if [[ $(file_not_found "$out_file") ]]; then
      exec_cmd="ffmpeg -v panic -stats -i {} -metadata artist=\"${artist}\" -metadata title=\"${title}\" \"${out_file}\" </dev/null && rm {}"
      missing_files[missing_files_ix]="$fname;$exec_cmd;$link"
      let missing_files_ix=missing_files_ix+1
    fi
done < "$1"
echo

missing_count="${#missing_files[@]}"
if [[ $missing_count == 0 ]]; then
  echo -e "all files available."
  exit
fi

echo -e "Missing files: ${missing_count}"
echo -e "  Artist  -  Title"
for ((i = 0; i < ${#missing_files[@]}; i++)); do
  miss=`echo "${missing_files[$i]}" | cut -f 1 -d ';'`
  echo "${miss}"
done

request_confirmation "continue?"
if [[ $? == 0 ]]; then
  echo "abort."
  exit
fi

for ((i = 0; i < ${#missing_files[@]}; i++)); do
  IFS=';' read fname exec_cmd link <<< "${missing_files[$i]}"
  echo "downloading [${fname}] ..."
  youtube-dl -x -q -o "${tmp_file}" --exec "${exec_cmd}" "${link}"
  check_exit_code "youtube-dl ${link}"
done
