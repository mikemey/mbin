#!/usr/bin/env bash

HTTP_200="HTTP/1.1 200 OK"
HTTP_404="HTTP/1.1 404 Not Found"
HTTP_500="HTTP/1.1 500 Internal Server Error"
HTTP_501="HTTP/1.1 501 Not Implemented"

CONTENT_LENGTH_HEADER="content-length"

PORT=${1:-4545}
OUT_PIPE="$(basename $0)_out"

ROUTES=(
"put>/route>put_route"
".*>.*>route_not_found"
)

function put_route () {
  request_body="${REQUEST['body']}"

  status_line="$HTTP_200"
  response_body="echo: ${request_body} END"
}

function route_not_found () {
  status_line="$HTTP_501"
  response_body="no route found for '${REQUEST['original']}'"
}

function process_request () {
  declare -A REQUEST
  read_request_headers
  read_request_body "${REQUEST[$CONTENT_LENGTH_HEADER]}"

  route_func=`find_route_func "${REQUEST['method']}" "${REQUEST['path']}"`
  status_line= response_body=
  run_route "$route_func"

  timelog "${REQUEST['original']% *} [${status_line#* }] >>$response_body<<"
  respond_with "$status_line" "$response_body"
}

function read_request_headers () {
  HEADER_DONE=false
  FIRST_LINE=true
  while ! $HEADER_DONE && read LINE; do
    ORIGINAL=$(echo "$LINE" | tr -d '[\r\n]' )
    HEADER_LINE=$(echo "$ORIGINAL" | awk '{print tolower($0)}')

    if $FIRST_LINE; then
      REQUEST['original']="$ORIGINAL"
      IFS=' ' read method path http_version <<< "$HEADER_LINE"
      REQUEST['method']="$method"
      REQUEST['path']="$path"
      FIRST_LINE=false
    elif [[ -z "$HEADER_LINE" ]]; then
      HEADER_DONE=true
    else
      HEADER_LINE=$(echo "$HEADER_LINE" | tr -d '[\r\n]' | awk '{print tolower($0)}')
      if [[ "$HEADER_LINE" =~ ([^:]*):[[:space:]]*(.*) ]]; then
        HEADER_NAME="${BASH_REMATCH[1]}"
        HEADER_VAL="${BASH_REMATCH[2]}"
        REQUEST[$HEADER_NAME]=$HEADER_VAL
      fi
    fi
  done
}

function read_request_body () {
  content_length="$1"
  if [[ $content_length -ne 0 ]]; then
    read -n $content_length body
    REQUEST['body']="$body"
  fi
}

function find_route_func () {
  method="$1"
  path="$2"

  for route in ${ROUTES[@]}; do
    IFS='>' read route_method route_path route_func  <<< "$route"
    if [[ $method =~ $route_method ]] && [[ $path =~ $route_path ]]; then
      echo "$route_func"
      exit
    fi
  done
}

function run_route () {
  route_func="$1"
  $route_func
  if [[ -z $status_line ]]; then
    status_line="$HTTP_500"
    response_body="route function '$route_func' doesn't set \$status_line"
  fi
}

function respond_with () {
  status_line="$1"
  response_body="$2"
  response_len=`echo "$2" | wc -c`
  printf "%s\n${CONTENT_LENGTH_HEADER}: %d\n\n%s\n" "$status_line" $response_len "$response_body" > $OUT_PIPE
}

function start_server () {
  rm -f $OUT_PIPE
  mkfifo $OUT_PIPE
  trap "rm -f $OUT_PIPE" EXIT

  timelog "server start on port $PORT"
  while true; do
    cat $OUT_PIPE | nc -l $PORT > >(process_request)
  done
}

start_server
