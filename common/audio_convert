#!/usr/bin/env bash

default_audio_codec="ac3"
default_maximum_bitrate="640"
audio_codec=$default_audio_codec
maximum_bitrate=$default_maximum_bitrate

function print_usage () {
  if [[ ! -z $1 ]]; then
    echo -e "\n error: $1"
  fi
  echo -e "\n usage: $(basename $0) [-h] [-c codec] [-m max_bitrate] input_file output_file"
  echo -e "\nconverts audio-codec of input_file"
  echo -e "\nOptions:"
  echo -e "   -c codec        use audio codec (default: $default_audio_codec)"
  echo -e "   -m max_bitrate  maximum bitrate (default: $default_maximum_bitrate)"
  echo -e "   -h              show this help"
  exit
}

while getopts ":c:m:h" option; do
  case $option in
    h) print_usage;;
    c) audio_codec="$OPTARG";;
    m) maximum_bitrate="$OPTARG";;
    ?) print_usage "Invalid option: -$OPTARG";;
  esac
done

shift $((OPTIND-1))

input="$1"
output="$2"

[[ -z "$input" ]] && print_usage "Input parameter required!"
[[ -z "$output" ]] && print_usage "Output parameter required!"

function extract_audio_bitrate() {
  local audio_line=$(ffmpeg -i "$input" 2>&1 | grep "Audio.*kb/s")
  audio_line="${audio_line% kb/s*}"
  audio_line="${audio_line##* }"
  echo ${audio_line}
}

function list_subtitle_tracks() {
  echo "Available subtitles:"
  ffmpeg -i "$input" 2>&1 | grep "Stream.*Subtitle"
}

bitrate=$(extract_audio_bitrate)

if [[ -z "${bitrate}" ]]; then
  echo "could not extract audio bitrate"
  exit
fi
if [[ $bitrate -gt $maximum_bitrate ]]; then
  msg="Bitrate $bitrate exceeds maximum of $maximum_bitrate, reset to maximum?"
  request_confirmation "$msg"
  if [[ $? != 0 ]]; then
    echo -e "abort."
    exit
  fi
  bitrate=$maximum_bitrate
fi

bitrate="${bitrate}k"

list_subtitle_tracks
read -p "subtitle track (start with 0, leave empty for all tracks): " sub_ix

msg="re-encode audio ${audio_codec}, bitrate: ${bitrate}, subtitle: ${sub_ix:-all}?"
if $(request_confirmation "${msg}"); then
  echo ""
  ffmpeg -i "${input}" -stats -v 0 -c:v copy -c:a "${audio_codec}" -b:a "${bitrate}" \
         -map 0:v:0 -map 0:a:0 -map 0:s:${sub_ix} \
         "${output}"
else
  echo -e "\nabort."
fi
