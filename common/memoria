#!/usr/bin/env bash

function print_usage () {
  echo -e "\n usage: $(basename $0) [OPTIONS] DIRECTION file"
  echo -e "\nssh to $MEMORIA when no arguments given."
  echo -e "\nOPTIONS"
  echo -e "   -d             dry-run rsync command"
  echo -e "   -l             copy symlinks as symlinks"
  echo -e "   -p             only prints rsync command"
  echo -e "   -R             use relative path names"
  echo -e "   -h             show this help"
  echo -e "\nDIRECTION"
  echo -e "   -c             send to current (default)"
  echo -e "   -s             send to series"
  echo -e "   -m             send to movies"
  echo -e "   -x target_dir  send to \$HOME/target_dir"
  echo -e "   -g             get from \$HOME/"
  echo -e "   -gs            get series"
  echo -e "   -gm            get movies"
}

function error_exit () {
  echo "ERROR: $1"
  print_usage
  exit 1
}

function check_env () {
  if [[ ! ${!1} ]]; then
    echo "Environment variable '$1' not set!"
    exit
  fi
}

check_env MEMORIA

if [[ $# -eq 0 ]]; then
  echo "sshing into $MEMORIA"
  ssh "$MEMORIA"
  exit
fi

check_env MEMORIA_CUR
check_env MEMORIA_SER
check_env MEMORIA_MOV

PATH_ARGS=( "$@" )
USE_RELATIVE_PATHS=
DRY_RUN=
PRINT_ONLY=
COPY_SYMLINKS=

function remove_first_path_arg () {
  PATH_ARGS=( "${PATH_ARGS[@]:1}" )
}

function check_empty() {
  if [[ -z "$1" ]]; then
    error_exit "$2"
  fi
}

function read_options () {
  HAS_OPTION=true
  while [[ $HAS_OPTION == true ]]; do
    case "${PATH_ARGS[0]}" in
      "-d" )
        DRY_RUN=true
      ;;
      "-l" )
        COPY_SYMLINKS=true
      ;;
      "-p" )
        PRINT_ONLY=true
      ;;
      "-R" )
        USE_RELATIVE_PATHS=true
      ;;\
      * )
        HAS_OPTION=false
      ;;
    esac
    [[ $HAS_OPTION == true ]] && remove_first_path_arg
  done
}

function read_direction() {
  direction="${PATH_ARGS[0]}"
  remove_first_path_arg
  case $direction in
    "-c" )
      SOURCES=( "${PATH_ARGS[@]}" )
      TARGET="$MEMORIA:$MEMORIA_CUR"
    ;;
    "-s" )
      SOURCES=( "${PATH_ARGS[@]}" )
      TARGET="$MEMORIA:$MEMORIA_SER"
    ;;
    "-m" )
      SOURCES=( "${PATH_ARGS[@]}" )
      TARGET="$MEMORIA:$MEMORIA_MOV"
    ;;
    "-x" )
      target_dir=${PATH_ARGS[0]}
      remove_first_path_arg
      SOURCES=( "${PATH_ARGS[@]}" )
      TARGET="$MEMORIA:~/$target_dir"
    ;;
    "-g" )
      src_dir=${PATH_ARGS[0]}
      check_empty "${src_dir}" "empty file parameter"
      SOURCES=( "$MEMORIA:~/$src_dir" )
      TARGET="."
    ;;
    "-gs" )
      src_dir=${PATH_ARGS[0]}
      check_empty "${src_dir}" "empty file parameter"
      SOURCES=( "$MEMORIA:$MEMORIA_SER/${src_dir}" )
      TARGET="."
    ;;
    "-gm" )
      src_dir=${PATH_ARGS[0]}
      check_empty "${src_dir}" "empty file parameter"
      SOURCES=( "$MEMORIA:$MEMORIA_MOV/${src_dir}" )
      TARGET="."
    ;;
    * )
      if [[ "${PATH_ARGS[0]}" != "-h" ]]; then
        error_exit "direction invalid: ${PATH_ARGS[0]}"
      fi
      print_usage
      exit
    ;;
  esac
}

read_options
read_direction
check_empty "$SOURCES" "empty file parameter"

echo "rsync ${SOURCES[@]%/} to $TARGET ${USE_RELATIVE_PATHS:+(using relative path names)}"
if [[ $PRINT_ONLY ]]; then
  echo "==== PRINT ONLY ===="
  echo "rsync --progress --partial -t -r \
    ${USE_RELATIVE_PATHS:+-R} ${DRY_RUN:+-n} ${COPY_SYMLINKS:+-l} \
    --perms --chmod=Du=rwx,Dgo=rx,Fa=rw \
    --exclude=\"~*\" --exclude=\".*\" \
    ${SOURCES[@]%/} $TARGET"
else
  rsync --progress --partial -t -r \
    ${USE_RELATIVE_PATHS:+-R} ${DRY_RUN:+-n} ${COPY_SYMLINKS:+-l} \
    --perms --chmod=Du=rwx,Dgo=rx,Fa=rw \
    --exclude="~*" --exclude=".*" \
    "${SOURCES[@]%/}" "$TARGET"
fi
