#!/usr/bin/env bash

set -e

input_dir="$1"
output_dir="$2"
EXT="mkv"
DRYRUN=false

function process_all_files() {
  find "$input_dir" -type f -name "*.${EXT}" | while read input_file; do
    output_file=$(get_file_name "$input_file")
    if [ "$?" -ne 0 ]; then
      timelog "ERROR with file $input_file \n==> $output_file"
      exit 1
    fi
    output_file="${output_dir}/${output_file}"

    if [ -f "$output_file" ]; then
      timelog "${FG_LIGHT_RED}skipping existing: >$output_file< ${FG_DEFAULT}"
      continue
    fi

    timelog "convert: >${input_file}<"
    if $DRYRUN; then
      echo "mkdir -p ${output_dir}"
      echo "convert_video ${input_file} ${output_file}"
    else
      mkdir -p "${output_dir}"
      convert_video "$input_file" "$output_file"
      if [ "$?" -ne 0 ]; then
        exit 1
      fi
    fi
  done
}

function escape_name() {
  out=${1//. /.}
  out=${out//, /,}
  echo ${out// /.}
}

function get_file_name() {
  name=$(basename "$1")
  if [[ "$name" =~ (.*)[\.\s]+(S[0-9]{2}E[0-9]{2})\.(.*) ]]; then
    name="${BASH_REMATCH[1]}"
    seep="${BASH_REMATCH[2]}"
    remainder="${BASH_REMATCH[3]}"
  else
    echo "NOT matched: $name"
  fi

  [[ -z $seep ]] && echo "Season/Episode not extracted" && exit 1
  [[ -z $remainder ]] && echo "Title not extracted" && exit 1

  file_name="${name}.${seep}.${remainder}"
  echo $(escape_name "$file_name")
}

process_all_files
