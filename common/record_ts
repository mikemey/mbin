#!/usr/bin/env bash

out_dir="delete_me"
ts_dir="ts"

filelist="$out_dir/ts_list.txt"
combined_ts="$out_dir/combined.ts"
enc_preset="son"
out_file_ext="mp4"

function error_message () {
  echo
  echo "ERROR: $1"
  echo -e "\n usage: $(basename $0) [ -d | - e ] url_pattern max_piece_num output_file"
  echo -e "\nParameters:"
  echo -e "\t -d          \t only download, keeps temporary files in \"$out_dir\" directory"
  echo -e "\t -e          \t only encode, reads from temporary files"
  echo -e "\t url_pattern \t URL pattern to use for iteration"
  echo -e "\t max_piece_num \t upper limit of pieces (inclusive)"
  echo -e "\t output_file \t output file name (extension \"$out_file_ext\" added if none provided)"
  exit 1
}

function check_file_exists () {
  [[ -f "$1" ]] && error_message "$2 already exists: $1"
}

function check_param_exists () {
  [[ ! "$1" ]] && error_message "$2 not provided!"
}

function check_program_available () {
  [[ ! `command -v $1` ]] && error_message "command not available: $1"
}

function check_exit_code () {
  [[ $? -ne 0 ]] && error_message "processing failed: $1"
}

check_program_available wget
check_program_available ffmpeg
check_program_available HandBrakeCLI

download=true
encode=true

case "$1" in
  "-d" )
    encode=false
    shift
  ;;
  "-e" )
    download=false
    shift
  ;;
esac

urlpattern="$1"
pieces="$2"
outfile="${3%%.mp4}.$out_file_ext"
replace="XXX"
check_param_exists "$urlpattern" "URL pattern"
if [[ ${urlpattern} != *$replace* ]]; then
  error_message "URL pattern does not contain the replacement pattern \"$replace\""
fi

check_param_exists "$pieces" "upper limit of pieces"
if ! [[ "$pieces" =~ ^[0-9]+$ ]]; then
  error_message "upper limit parameter not a number!"
fi

check_param_exists "$outfile" "Output file"
check_file_exists "$outfile" "Output file"

if [[ "$download" = true ]]; then
  mkdir -p "$out_dir/$ts_dir"
  check_file_exists "$filelist" "File list"
  check_file_exists "$combined_ts" "Combined TS file"

  for count in $(seq 0 $pieces); do
    url="${urlpattern/$replace/$count}"
    tmpfile="$count.ts"
    wget -q --show-progress -O "$out_dir/$ts_dir/$tmpfile" "$url"
    check_exit_code "wget"

    printf "      ${FG_LIGHT_YELLOW}${BG_DARK_GRAY}total: $pieces${BG_DEFAULT}${FG_DEFAULT}"
    echo "file '$ts_dir/$tmpfile'" >> $filelist
    sleep 0.5
  done
  printf "\n"
  ffmpeg -v panic -stats -f concat -safe 0 -i "$filelist" -c copy "$combined_ts"
  check_exit_code "ffmpeg"
  printf "\n"
else
  printf "${FG_LIGHT_GREEN}- skipping downloading -${FG_DEFAULT}\n"
fi

if [[ "$encode" = true ]]; then
  echo "start encoding: $(date +'%Y-%m-%d %H:%M')"
  HandBrakeCLI --preset-import-gui --preset="$enc_preset" -i "$combined_ts" -o "$outfile" 2> /dev/null
  check_exit_code "handbrake"
  printf "\n"
else
  printf "${FG_LIGHT_GREEN}- skipping encoding -${FG_DEFAULT}\n"
fi

exit 0